from langgraph.graph import MessagesState
from typing import Annotated, Optional, TypedDict, List
from pydantic import BaseModel
from pathlib import Path

class Done(BaseModel):
    """Return this if no tool_call is needed anymore."""
    done: Annotated[str, "Done"]

class OrchestrationState(TypedDict):
    """
    Track the state of the orchestrator in handling tool_response, observation and tool_choice_reasoning
    """
    tool_call_request: Annotated[Optional[str], "Reason and Request to make a tool_calling decision to the tool_calling agent."]
    observation: Annotated[List[dict[str, str]], "List of observation each each tool_calling step."]

class CurrentState(MessagesState):
    """Tracks the state of the Football Analyst Agentic System across steps.
    Includes user query and intermediate file paths generated by the data analyst, 
    database manager, and visualization components.
    """
    orchestration_state: Annotated[List[OrchestrationState], "Results from orchestrator agent"]
