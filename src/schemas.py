from langgraph.graph import MessagesState
from pydantic import BaseModel
from typing import Annotated, Optional, TypedDict, List, Literal

class Done(BaseModel):
    """Return this if no tool_call is needed anymore."""
    done: Annotated[str, "Done message will be used to terminate the workflow"]
    file_path: Annotated[str, "File name of the dataset generated"]

class NextStep(BaseModel):
    """Return this if no tool_call is needed anymore."""
    next_step: Annotated[str, "End the current agentic step, move to the next agentic step"]
    file_path: Annotated[str, "File name of the dataset/visualization/data_analysis_report generated"]

class AgentState(TypedDict):
    """
    Track the state of agent in handling tool_response, observation and tool_choice_reasoning
    """
    tool_call_request: Annotated[Optional[str], "Request to make a tool_calling decision to the tool_calling agent."]
    reasoning: Annotated[str, "Reason why to choose that tool."]

class CurrentState(MessagesState):
    """
    Tracks the state of the Football Analyst Agentic System across steps.
    Includes user query and intermediate file paths generated by the data analyst, 
    database manager, and visualization components.
    """
    prev_tool_call_request: Annotated[str, "Tool Call Order."]
    prev_tool_reasoning: Annotated[str, "Reason why you choose the tool."]
    prev_tool_result: Annotated[str, "Results from tool call."]
    prev_tool_name: Annotated[str, "Tool name"]
    insights: Annotated[List[str], "Insights so far up until the current step."]
    file_path: Annotated[List[str], "File name of the dataset/visualization/data analysis report generated."]
    current_agent: Annotated[Literal["orchestrator", "specialist"], "Current agentic step."]